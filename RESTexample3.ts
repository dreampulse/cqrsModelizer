/// <reference path="./typings/tsd.d.ts"/>

import express = require('express');
import bodyParser = require('body-parser');
var session = require('express-session');
var logger = require('morgan');

import mongodb = require('mongodb');
import Q = require('q');
Q.longStackSupport = true;


import cqrs = require('./src/cqrs3');
var Command = cqrs.Command;
var EventProvider = cqrs.EventProvider;
var StoredEventProvider = cqrs.StoredEventProvider;
var EventHandler = cqrs.EventHandler;
var Context = cqrs.Context;
var MongoProjection = cqrs.MongoProjection;
var DomainEvent = cqrs.DomainEvent;


interface ExpressRequest extends express.Request {
  session : {
    user : User.Projection
  };
}

interface Update<T> {
  _id : mongodb.ObjectID;
  object : T;
}

interface Empty {}

////////////////////////////
////////// Domain Entities



module Activities {

  export interface BookableItem {
    name : string;
    price : number;
    quantity : number;
  }

  export interface Activity {
    desc : string;
    items : BookableItem[];
  }

}

module User {
  export interface User {
    name : string;
    email : string;
    password : string;
  }

  export interface Login {
    email : string;
    password : string;
  }

  export interface Projection {
    _id : mongodb.ObjectID;
    name : string;
    email : string;
    password : string;
  }

}



///////////////////////////
// Projections


module Projections {

  export module Activity {
    export interface User {
      _id : mongodb.ObjectID;
      name : string;
    }

    export interface Activities extends Activities.Activity {
      _id : mongodb.ObjectID;
      owner : User;
    }
  }


}



/////////////////////
// server


var initServer = function (db:mongodb.Db) {

  var appContext = new Context('appContext', db);

  var domainEvents = {
    userRegistered : new DomainEvent<User.User>('userRegistered'),
    userLoggedIn : new DomainEvent<Empty>('userLoggedIn'),
    userEdited : new DomainEvent<Update<User.User>>('userEdited'),
    userRemoved : new DomainEvent<mongodb.ObjectID>('userRemoved')

  };

  // das hier ist quasi ein Aggregartor
  var projections = {
    usersProjection: new MongoProjection<User.Projection>('users', db, (collection) => {

      // handle thise events for projection:
      domainEvents.userRegistered.handle((user:User.User) => {

        var userProjection : User.Projection = {
          _id : new mongodb.ObjectID(),  // will be generated by db
          email: user.email,
          name: user.name,
          password: user.password
        };
        collection.insert(userProjection);
      });

      domainEvents.userEdited.handle((updatedUser:Update<User.User>) => {
        projections.usersProjection.query({_id:updatedUser._id})
          .then((users : User.Projection[]) => {
            //assert(users.length == 1);
            collection.execute('update', {_id : updatedUser._id}, updatedUser.object);
          });
      });

      domainEvents.userRemoved.handle((id : mongodb.ObjectID) => {
        collection.execute('remove', {_id : id});
      });


    })

/*    activitiesProjection: new MongoProjection<Projections.Activity.Activities>('activities', db, (collection) => {

      // handle thise events for projection:
      domainEvents.activityCreated.handle((activity:Activities.Activity) => {

        var activityProjection = <Projections.Activity.Activities>activity;
        activityProjection._id = new mongodb.ObjectID();
        activityProjection.owner = {
          _id : new mongodb.ObjectID(),
          name :'jonathan'
        };
        collection.insert(activityProjection);
      });

      domainEvents.activityUpdated.handle((activity:Update<Activities.Activity>) => {
        collection.execute('update', {_id : activity._id}, activity.object);
      });

      domainEvents.activityDeleted.handle((id:ObjectId) => {
        collection.execute('remove', {_id : id._id});
      });


      // user Handling
      domainEvents.userUpdated.handle((update:Update<Users.User>) => {
        // update name
        collection.execute('update', { 'owner._id' : update._id}, {
          '$set' : { 'owner.name' : update.object.name}
        });
      });

      domainEvents.userDeleted.handle((update:Update<Users.User>) => {
        // also delete activity
        collection.execute('remove', { 'owner._id' : update._id});
      });

    }),

    usersProjection: new MongoProjection<Projections.Users>('users', db, (collection) => {

      // handle thise events for projection:
      domainEvents.userCreated.handle((user:Users.User) => {
        var userProjection = <Projections.Users>user;
        userProjection._id = new mongodb.ObjectID();
        collection.insert(userProjection);
      });

      domainEvents.userUpdated.handle((update:Update<Users.User>) => {
        collection.execute('update', {_id : update._id}, update.object);
      });

      domainEvents.userDeleted.handle((id:ObjectId) => {
        collection.execute('remove', {_id : id._id});
      });

    }) */
  };

  return {
    domainEvents: domainEvents,
    projections: projections
  }

};




// running

var app = express();
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(session({secret: 'bak-gAt-arC-eF'}));


// open mongodb connection
Q.nfcall(mongodb.MongoClient.connect, 'mongodb://127.0.0.1:27017/cqrs')
  .then((db:mongodb.Db) => {

    var context = initServer(db);

    app.listen(3000, () => {
      console.info('Server is running!')
    });

    app.put('/user', (req:ExpressRequest, res:express.Response) => {
      var params = <User.User>req.body;

      context.domainEvents.userRegistered.emit(params);

      res.json({'ok':true});
    });

    app.post('/user/login', (req:ExpressRequest, res:express.Response) => {
      var params = <User.Login>req.body;

      context.projections.usersProjection.query({email:params.email})
        .then((users : User.Projection[]) => {
          if (users.length > 1) { throw new Error("That shout not happen"); }
          if (users.length < 1) { throw new Error("User not found"); }
          if (users.length == 1) {
            if (users[0].password !== params.password) {  // wrong password
              throw new Error("Wrong password");
            } else {
              req.session.user = users[0];
              context.domainEvents.userLoggedIn.emit({});
              res.json({'ok':true});
            }
          }
        }).done();
    });

    app.post('/user', (req:ExpressRequest, res:express.Response) => {
      var params = <User.User>req.body;
      if (req.session.user) { // logged in
        var update : Update<User.User> = {
          _id : req.session.user._id,
          object : params
        };
        context.domainEvents.userEdited.emit(update);
      }
    });

    app.delete('/user', (req:ExpressRequest, res:express.Response) => {
      if (req.session.user) { // logged in
        context.domainEvents.userRemoved.emit(req.session.user._id);
      }
    });

    app.put('/activity', (req:express.Request, res:express.Response) => {

    });


    app.get('/activites', (req:express.Request, res:express.Response) => {

    });

  }).done();

